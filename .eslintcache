[{"/Users/niklasbratt/Documents/orion/trbok/src/index.js":"1","/Users/niklasbratt/Documents/orion/trbok/src/api/strava.js":"2","/Users/niklasbratt/Documents/orion/trbok/src/components/WeekDay.js":"3","/Users/niklasbratt/Documents/orion/trbok/src/components/Week.js":"4","/Users/niklasbratt/Documents/orion/trbok/src/components/Summary.js":"5","/Users/niklasbratt/Documents/orion/trbok/src/components/Month.js":"6","/Users/niklasbratt/Documents/orion/trbok/src/components/WeekEvent.js":"7","/Users/niklasbratt/Documents/orion/trbok/src/components/AppLoggedIn.js":"8","/Users/niklasbratt/Documents/orion/trbok/src/components/SignInSide.js":"9","/Users/niklasbratt/Documents/orion/trbok/src/components/App.js":"10","/Users/niklasbratt/Documents/orion/trbok/src/components/SignUp.js":"11","/Users/niklasbratt/Documents/orion/trbok/src/components/secret.js":"12","/Users/niklasbratt/Documents/orion/trbok/src/components/EditEventDialog.js":"13","/Users/niklasbratt/Documents/orion/trbok/src/components/AddNewEventDialog.js":"14","/Users/niklasbratt/Documents/orion/trbok/src/components/MonthDay.js":"15","/Users/niklasbratt/Documents/orion/trbok/src/components/MonthEvent.js":"16","/Users/niklasbratt/Documents/orion/trbok/src/components/Statistics.js":"17"},{"size":156,"mtime":1610009138393,"results":"18","hashOfConfig":"19"},{"size":1302,"mtime":1609524521302,"results":"20","hashOfConfig":"19"},{"size":4220,"mtime":1610275637888,"results":"21","hashOfConfig":"19"},{"size":12875,"mtime":1610275327210,"results":"22","hashOfConfig":"19"},{"size":2089,"mtime":1610313509008,"results":"23","hashOfConfig":"19"},{"size":12612,"mtime":1610312305037,"results":"24","hashOfConfig":"19"},{"size":24873,"mtime":1610353342486,"results":"25","hashOfConfig":"19"},{"size":5942,"mtime":1610353382570,"results":"26","hashOfConfig":"19"},{"size":4663,"mtime":1610353331162,"results":"27","hashOfConfig":"19"},{"size":3565,"mtime":1610353390798,"results":"28","hashOfConfig":"19"},{"size":5933,"mtime":1610048303391,"results":"29","hashOfConfig":"19"},{"size":134,"mtime":1610111984776,"results":"30","hashOfConfig":"19"},{"size":2406,"mtime":1610304415601,"results":"31","hashOfConfig":"19"},{"size":18430,"mtime":1610214597495,"results":"32","hashOfConfig":"19"},{"size":4081,"mtime":1610308569470,"results":"33","hashOfConfig":"19"},{"size":8571,"mtime":1610312498979,"results":"34","hashOfConfig":"19"},{"size":3670,"mtime":1610353319563,"results":"35","hashOfConfig":"19"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},"1a4qwvx",{"filePath":"39","messages":"40","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"41","messages":"42","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"38"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"53"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"60","messages":"61","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"38"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"69","messages":"70","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},"/Users/niklasbratt/Documents/orion/trbok/src/index.js",[],["75","76"],"/Users/niklasbratt/Documents/orion/trbok/src/api/strava.js",["77","78"],"/Users/niklasbratt/Documents/orion/trbok/src/components/WeekDay.js",["79"],"import React, { Fragment } from 'react';\n\nimport WeekEvent from './WeekEvent';\n\nclass WeekDay extends React.Component {\n\n    render() {\n        const styles = {\n            cell: {\n                borderRight: '1px solid gray',\n                padding: '5px'\n            },\n            dateCell: {\n                borderRight: '1px solid gray',\n                padding: '5px',\n                width: '80px'\n            },\n            editCell: {\n                borderRight: '1px solid gray',\n                padding: '0',\n                width: '20px'\n            },\n            hiddenCell: {\n                borderRight: '1px solid gray',\n                padding: '0',\n                width: '20px'\n            }\n        };\n\n        if (this.props.events.length === 0) {\n            let eventData = {\n                key: 'empty_' + this.props.date,\n                dateRowSpan: 1,\n                date: this.props.date,\n                plannedIsHidden: this.props.plannedIsHidden,\n                name: 'Vila',\n                type: '',\n                distance: 0,\n                movingTime: 0,\n                title: '',\n                ol: 0,\n                night: 0,\n                quality: 0,\n                lsd: 0,\n                strength: 0,\n                alternative: 0,\n                forest: 0,\n                path: 0\n            };\n            return (\n                <WeekEvent dayDate={this.props.date} eventData={eventData} key={'weekEvent_' + eventData.key} user={this.props.user} upDatePage={this.props.upDatePage} performedIsHidden={this.props.performedIsHidden}/>\n            )\n        } else {\n            let dayEvents = [];\n            let eventData = {\n                key: this.props.events[0]._id,\n                dateRowSpan: this.props.events.length,\n                date: this.props.date,\n                plannedIsHidden: this.props.plannedIsHidden,\n                name: this.props.events[0].name,\n                type: this.props.events[0].type,\n                distance: this.props.events[0].distance,\n                movingTime: this.props.events[0].movingTime,\n                title: this.props.events[0].title,\n                ol: this.props.events[0].ol,\n                night: this.props.events[0].night,\n                quality: this.props.events[0].quality,\n                lsd: this.props.events[0].lsd,\n                strength: this.props.events[0].strength,\n                alternative: this.props.events[0].alternative,\n                forest: this.props.events[0].forest,\n                path: this.props.events[0].path\n            };\n            dayEvents.push(<WeekEvent dayDate={this.props.date} eventData={eventData} key={'weekEvent_' + eventData.key} user={this.props.user} upDatePage={this.props.upDatePage} performedIsHidden={this.props.performedIsHidden}/>);\n\n\n            for (let i = 1; i < this.props.events.length; i++) {\n                let eventData = {\n                    key: this.props.events[i]._id,\n                    dateRowSpan: 0,\n                    date: this.props.date,\n                    plannedIsHidden: this.props.plannedIsHidden,\n                    name: this.props.events[i].name,\n                    type: this.props.events[i].type,\n                    distance: this.props.events[i].distance,\n                    movingTime: this.props.events[i].movingTime,\n                    title: this.props.events[i].title,\n                    ol: this.props.events[i].ol,\n                    night: this.props.events[i].night,\n                    quality: this.props.events[i].quality,\n                    lsd: this.props.events[i].lsd,\n                    strength: this.props.events[i].strength,\n                    alternative: this.props.events[i].alternative,\n                    forest: this.props.events[i].forest,\n                    path: this.props.events[i].path\n                };\n                dayEvents.push(<WeekEvent dayDate={this.props.date} eventData={eventData} key={'weekEvent_' + eventData.key} user={this.props.user} upDatePage={this.props.upDatePage} performedIsHidden={this.props.performedIsHidden}/>);\n            }\n            return <Fragment>{dayEvents}</Fragment>\n        }\n    }\n}\n\nexport default WeekDay;","/Users/niklasbratt/Documents/orion/trbok/src/components/Week.js",[],"/Users/niklasbratt/Documents/orion/trbok/src/components/Summary.js",[],"/Users/niklasbratt/Documents/orion/trbok/src/components/Month.js",[],"/Users/niklasbratt/Documents/orion/trbok/src/components/WeekEvent.js",["80"],"import React from 'react';\nimport axios from 'axios';\n\nimport moment from 'moment';\nimport momentDurationFormatSetup from 'moment-duration-format';\nimport TableRow from '@material-ui/core/TableRow';\nimport TableCell from '@material-ui/core/TableCell';\nimport Checkbox from '@material-ui/core/Checkbox';\n//import TextareaAutosize from '@material-ui/core/TextareaAutosize';\nimport TextField from '@material-ui/core/TextField';\nimport Select from '@material-ui/core/Select';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\n\nimport MenuItem from '@material-ui/core/MenuItem';\nimport DirectionsRunOutlinedIcon from '@material-ui/icons/DirectionsRunOutlined';\nimport FitnessCenterOutlinedIcon from '@material-ui/icons/FitnessCenterOutlined';\nimport DirectionsBikeOutlinedIcon from '@material-ui/icons/DirectionsBikeOutlined';\nimport PoolIcon from '@material-ui/icons/Pool';\nimport DirectionsWalkIcon from '@material-ui/icons/DirectionsWalk';\nimport AccessibilityNewIcon from '@material-ui/icons/AccessibilityNew';\nimport NightsStayIcon from '@material-ui/icons/NightsStay';\n\nimport MoreHorizIcon from '@material-ui/icons/MoreHoriz';\n\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport DoneIcon from '@material-ui/icons/Done';\nimport RevertIcon from \"@material-ui/icons/NotInterestedOutlined\";\n\nimport EditEventDialog from './EditEventDialog';\nimport AddNewEventDialog from './AddNewEventDialog';\nimport { Cancel } from '@material-ui/icons';\n\n  //const backendBaseUrl = 'http://localhost:3333';\n  const backendBaseUrl = 'https://trbokbackend.niklasking.com';\n\nmomentDurationFormatSetup(moment);\n\nfunction getDistance(distance) {\n    if (distance === 0) {\n        return \"\"\n    }\n    if (distance < 1000) {\n        return distance + \" m\"\n    }\n    return Math.round(distance*100/1000)/100 + \" km\";\n}\nfunction getTime(time) {\n    if (time === 0) {\n        return '';\n    }\n    return moment.duration(time, \"seconds\").format(\"H:mm\");\n}\nfunction getSeconds(time) {\n    let separator = '';\n    if (time.indexOf(':') > 0) {\n        separator = ':';\n    } else if (time.indexOf('.') > 0) {\n        separator = '.';\n    } else if (time.indexOf(',') > 0) {\n        separator = ',';\n    }\n    if (separator !== '') {\n        let parts = time.split(separator);\n        return parseInt(parts[0]) * 60 * 60 + parseInt(parts[1]) * 60;\n    } else {\n        return parseInt(time)*60;\n    }\n}\nfunction getTypeIcon(type) {\n    switch (type) {\n        case 'ol':\n            return <img src={process.env.PUBLIC_URL + '/olskarm.png'} alt=\"OL\" height={16} width={16} style={{border: \"solid black 1px\"}}/>\n        case 'night':\n            return <NightsStayIcon/>\n        case 'Run':\n            return <DirectionsRunOutlinedIcon/>\n        case 'WeightTraining':\n            return <FitnessCenterOutlinedIcon/>\n        case 'Workout':\n            return <AccessibilityNewIcon/>\n        case 'Ride':\n        case 'VirtualRide':\n            return <DirectionsBikeOutlinedIcon/>\n        case 'Swim':\n            return <PoolIcon/>\n        case 'Walk':\n            return <DirectionsWalkIcon/>\n        case 'Rowing':\n        case 'Kayaking':\n            return <img src={process.env.PUBLIC_URL + '/kayak.png'} alt=\"Kayak\" height={16} width={16} />\n        case 'NordicSki':\n        case 'RollerSki':\n            return <img src={process.env.PUBLIC_URL + '/ski.png'} alt=\"Ski\" height={16} width={16} />\n        default:\n            return type;\n    }\n}\n\nclass WeekEvent extends React.Component {\n    state = { \n//        isEditMode: false,\n        isEditing: false,\n        isAdding: false,\n        name: '',\n        movingTime: 0,\n        distance: 0,\n        type: '',\n        ol: false,\n        night: false,\n        quality: false,\n        lsd: false,\n        strength: false,\n        alternative: false,\n        forest: false,\n        path: false,\n        openEditEventDialog: false,\n        openDeleteWarningDialog: false\n}\n\n    getStravaEventOneDay = async () => {\n\n        const after = moment(this.props.dayDate + \" 00:00:00\").unix();\n        const before = moment(this.props.dayDate + \" 23:59:59\").unix();\n        const url = backendBaseUrl + '/api/v1/strava/activities/between' +\n                    '?before=' + before + '&after=' + after +\n                    '&stravaId=' + this.props.user.stravaId;\n        \n        const response = await axios.get(url);\n        this.props.upDatePage();\n    }\n\n    // ***** EDIT EVENT DIALOG *******\n    handleCloseEditEventDialog = (value) => {\n        this.setState({openEditEventDialog: false});\n        switch (value) {\n            case 'editEvent':\n                this.setState({isEditing: true});\n                break;\n            case 'addEvent':\n                if (this.props.eventData.key.startsWith('empty_')) {\n                    this.setState({isEditing: true});\n                } else {\n                    this.setState({isAdding: true});\n                }\n                break;\n            case 'deleteEvent':\n                this.setState({openDeleteWarningDialog: true});\n                break;\n            case 'strava':\n                this.getStravaEventOneDay();\n                break;\n            default:\n        }\n    };\n    // *******************************\n\n    handleCloseDeleteWarningDialogOk = async () => {\n        this.setState({openDeleteWarningDialog: false});\n\n        const url = backendBaseUrl + '/api/v1/activities/' + this.props.eventData.key;\n        await axios.delete(url);\n        this.props.upDatePage();\n    }\n    handleCloseDeleteWarningDialogNok = () => {\n        this.setState({openDeleteWarningDialog: false});\n    }\n\n    setEditMode = () => {\n        this.setState({name: this.props.eventData.name});\n//        if (!this.props.eventData.key.startsWith('empty_')) {\n            this.setState({openEditEventDialog: true});\n//        } else {\n//            this.setState({openEditEventDialog: true});\n//        }\n    }\n    handleAddEventClose = async (result) => {\n        this.setState({isAdding: false});\n        if (result.item.saveStatus) {\n            const night = result.item.type === 'night' ? 1 : result.item.night;\n            const event = {\n                startDate: this.props.dayDate,\n                user: this.props.user,\n                name: result.item.name,\n                distance: result.item.distance * 1000,\n                movingTime: getSeconds(result.item.movingTime),\n                type: result.item.type,\n                ol: result.item.ol,\n                night: night,\n                quality: result.item.quality,\n                lsd: result.item.lsd,\n                strength: result.item.strength,\n                alternative: result.item.alternative,\n                forest: result.item.forest,\n                path: result.item.path\n//                typePlanned: this.state.typePlanned,\n//                movingTimePlanned: this.state.movingTimePlanned,\n//                distancePlanned: this.state.distancePlanned,    \n            }\n            const url = backendBaseUrl + '/api/v1/activities';\n            await axios.post(url, event);\n            this.props.upDatePage();\n            } \n    }\n    cancelEditMode = () => {\n        this.setState({isEditing: false});\n    }\n    saveEvent = async () => {\n/*\n        if (this.validatePlannedDistance()) {\n            // true betyder att detta fält INTE är ok.\n            return\n        }\n        if (this.validatePlannedMovingTime()) {\n            // true betyder att detta fält INTE är ok.\n            return\n        }\n*/\n        if (this.validateDistance()) {\n            // true betyder att detta fält INTE är ok.\n            return\n        }\n        if (this.validateMovingTime()) {\n            // true betyder att detta fält INTE är ok.\n            return\n        }\n        if (this.props.eventData.key.startsWith('empty_')) {\n            // New event\n            const night = this.state.type === 'night' ? 1 : this.state.night;\n            const event = {\n                startDate: this.props.dayDate,\n                _id: this.props.eventData.key,\n                date: this.props.eventData.date,\n                user: this.props.user,\n                name: this.state.name,\n                distance: this.state.distance * 1000,\n                movingTime: getSeconds(this.state.movingTime),\n                type: this.state.type,\n                ol: this.state.ol,\n                night: night,\n                quality: this.state.quality,\n                lsd: this.state.lsd,\n                strength: this.state.strength,\n                alternative: this.state.alternative,\n                forest: this.state.forest,\n                path: this.state.path\n            }\n            const url = backendBaseUrl + '/api/v1/activities';\n            await axios.post(url, event);\n        } else {\n            // Existing event\n            const ol = this.state.type === 'ol'|| this.state.type === 'night' ? 1 : this.state.ol;\n            const night = this.state.type === 'night' ? 1 : this.state.night;\n            const event = {\n                _id: this.props.eventData.key,\n                date: this.props.eventData.date,\n                user: this.props.user,\n                name: this.state.name,\n                distance: this.state.distance * 1000,\n                movingTime: getSeconds(this.state.movingTime),\n                type: this.state.type,\n                ol: ol,\n                night: night,\n                quality: this.state.quality,\n                lsd: this.state.lsd,\n                strength: this.state.strength,\n                alternative: this.state.alternative,\n                forest: this.state.forest,\n                path: this.state.path               \n            }\n            const url = backendBaseUrl + '/api/v1/activities';\n            await axios.patch(url, event);\n        }\n        this.setState({isEditMode: false});\n        this.setState({isEditing: false});\n        this.setState({isAdding: false});\n        this.props.upDatePage();\n    }\n/*\n    validatePlannedDistance = () => {\n        return isNaN(this.state.distancePlanned);\n    }\n    correctPlannedDistance = (event) => {\n        this.setState({ distancePlanned: event.target.value.replace(/[^\\d.-]/g, '') });\n    }\n    validatePlannedMovingTime = () => {\n        const re = /^(([0-9]|0[0-9]|1[0-9]|2[0-3]):[0-5][0-9]$)|(^[0-9]*$)/;\n        if (this.state.movingTimePlanned.match(re)) {\n            return false;\n        } else {\n            return true;\n        }\n    }\n    correctPlannedMovingTime = (event) => {\n        this.setState({ movingTimePlanned: event.target.value.replace(/[^\\d:]/g, '') });\n    }\n*/\n    validateDistance = () => {\n        return isNaN(this.state.distance);\n    }\n    correctDistance = (event) => {\n        this.setState({ distance: event.target.value.replace(/[^\\d.-]/g, '') });\n    }\n    validateMovingTime = () => {\n        const re = /^(([0-9]|0[0-9]|1[0-9]|2[0-3]):[0-5][0-9]$)|(^[0-9]*$)/;\n        if (this.state.movingTime.match(re)) {\n            return false;\n        } else {\n            return true;\n        }\n    }\n    correctMovingTime = (event) => {\n        this.setState({ movingTime: event.target.value.replace(/[^\\d:]/g, '') });\n    }\n\n    componentDidMount() {\n        this.setState({movingTime: getTime(this.props.eventData.movingTime)});\n        this.setState({distance: Math.round(this.props.eventData.distance*100/1000)/100});\n        this.setState({type: this.props.eventData.type});\n        this.setState({ol: this.props.eventData.ol === 1 ? true : false});\n        this.setState({night: this.props.eventData.night === 1 ? true : false});\n        this.setState({quality: this.props.eventData.quality === 1 ? true : false});\n        this.setState({lsd: this.props.eventData.lsd === 1 ? true : false});\n        this.setState({strength: this.props.eventData.strength === 1 ? true : false});\n        this.setState({alternative: this.props.eventData.alternative === 1 ? true : false});\n        this.setState({forest: this.props.eventData.forest === 1 ? true : false});\n        this.setState({path: this.props.eventData.path === 1 ? true : false});\n    }\n    render() {\n        const styles = {\n            cell: {\n                borderRight: '1px solid gray',\n                padding: '5px'\n            },\n            smallCell: {\n                borderRight: '1px solid gray',\n                padding: '2px',\n                width: '30px'\n            },\n            dataCell: {\n                borderRight: '1px solid gray',\n                padding: '5px',\n                width: '80px'\n            },\n            dateCell: {\n                borderRight: '1px solid gray',\n                padding: '5px',\n                width: '80px',\n                backgroundColor: 'lightGray'\n            },\n            editCell: {\n                borderRight: '1px solid gray',\n                padding: '0',\n                width: '20px'\n            },\n            hiddenCell: {\n                borderRight: '1px solid gray',\n                padding: '0',\n                width: '20px'\n            },\n            checkbox: {\n                width: '16px',\n                height: '16px'\n            }\n        };\n\n        return (\n            <TableRow key={this.props.eventData.key}>\n                {!(this.state.isEditing) && <TableCell style={styles.editCell} align=\"center\">\n                        <MoreHorizIcon onClick={this.setEditMode}/>\n                    </TableCell>}\n                {this.props.eventData.key.startsWith('empty_') && <EditEventDialog open={this.state.openEditEventDialog} onClose={this.handleCloseEditEventDialog} emptyDay={true}/>}\n                {!this.props.eventData.key.startsWith('empty_') && <EditEventDialog open={this.state.openEditEventDialog} onClose={this.handleCloseEditEventDialog} emptyDay={false}/>}\n                <Dialog\n                    open={this.state.openDeleteWarningDialog}\n                    onClose={this.handleCloseDeleteWarningDialogNok}\n                    aria-labelledby=\"alert-dialog-title\"\n                    aria-describedby=\"alert-dialog-description\"\n                >\n                    <DialogTitle id=\"alert-dialog-title\">{\"Ta bort aktivitet?\"}</DialogTitle>\n                    <DialogContent>\n                    <DialogContentText id=\"alert-dialog-description\">\n                        Är du säkert på att du vill ta bort aktivitet:<br/>\n                        {this.props.dayDate} - {this.props.eventData.name}?\n                    </DialogContentText>\n                    </DialogContent>\n                    <DialogActions>\n                    <Button onClick={this.handleCloseDeleteWarningDialogOk} color=\"primary\" startIcon={<DeleteIcon/>}>\n                        Ja\n                    </Button>\n                    <Button onClick={this.handleCloseDeleteWarningDialogNok} color=\"primary\" autoFocus startIcon={<Cancel/>}>\n                        Nej\n                    </Button>\n                    </DialogActions>\n                </Dialog>\n                {this.state.isAdding && <AddNewEventDialog handleAddEventClose={this.handleAddEventClose} open={this.state.isAdding} dayDate={this.props.dayDate}/>}\n\n                {this.state.isEditing && <TableCell style={styles.editCell} align=\"center\">\n                        <DoneIcon onClick={this.saveEvent}/>\n                        <RevertIcon onClick={this.cancelEditMode}/>\n                    </TableCell>}\n\n                {this.props.eventData.dateRowSpan > 0 && <TableCell rowSpan={this.props.eventData.dateRowSpan} style={styles.dateCell} align=\"left\">\n                    {this.props.eventData.date}</TableCell>}\n\n                {this.props.eventData.plannedIsHidden && <TableCell style={styles.hiddenCell}></TableCell>}\n                {!this.props.eventData.plannedIsHidden && <TableCell colSpan=\"4\" style={styles.cell}></TableCell>}\n\n                {(!this.state.isEditing && !this.props.performedIsHidden) && <TableCell style={styles.cell}>{this.props.eventData.name}</TableCell>}\n                {(!this.state.isEditing && !this.props.performedIsHidden) && <TableCell align=\"center\" style={styles.cell}>{getTypeIcon(this.props.eventData.type)}</TableCell>}\n                {(!this.state.isEditing && !this.props.performedIsHidden) && this.props.eventData.ol === 1 && <TableCell align=\"center\" style={styles.smallCell}><Checkbox checked={true} disabled style={styles.checkbox}/></TableCell>}\n                {(!this.state.isEditing && !this.props.performedIsHidden) && this.props.eventData.ol === 0 && <TableCell align=\"center\" style={styles.smallCell}>&nbsp;</TableCell>}\n                {(!this.state.isEditing && !this.props.performedIsHidden) && this.props.eventData.night === 1 && <TableCell align=\"center\" style={styles.smallCell}><Checkbox checked={true} disabled style={styles.checkbox}/></TableCell>}\n                {(!this.state.isEditing && !this.props.performedIsHidden) && this.props.eventData.night === 0 && <TableCell align=\"center\" style={styles.smallCell}>&nbsp;</TableCell>}\n                {(!this.state.isEditing && !this.props.performedIsHidden) && this.props.eventData.quality === 1 && <TableCell align=\"center\" style={styles.smallCell}><Checkbox checked={true} disabled style={styles.checkbox}/></TableCell>}\n                {(!this.state.isEditing && !this.props.performedIsHidden) && this.props.eventData.quality === 0 && <TableCell align=\"center\" style={styles.smallCell}>&nbsp;</TableCell>}\n                {(!this.state.isEditing && !this.props.performedIsHidden) && this.props.eventData.lsd === 1 && <TableCell align=\"center\" style={styles.smallCell}><Checkbox checked={true} disabled style={styles.checkbox}/></TableCell>}\n                {(!this.state.isEditing && !this.props.performedIsHidden) && this.props.eventData.lsd === 0 && <TableCell align=\"center\" style={styles.smallCell}>&nbsp;</TableCell>}\n                {(!this.state.isEditing && !this.props.performedIsHidden) && this.props.eventData.strength === 1 && <TableCell align=\"center\" style={styles.smallCell}><Checkbox checked={true} disabled style={styles.checkbox}/></TableCell>}\n                {(!this.state.isEditing && !this.props.performedIsHidden) && this.props.eventData.strength === 0 && <TableCell align=\"center\" style={styles.smallCell}>&nbsp;</TableCell>}\n                {(!this.state.isEditing && !this.props.performedIsHidden) && this.props.eventData.alternative === 1 && <TableCell align=\"center\" style={styles.smallCell}><Checkbox checked={true} disabled style={styles.checkbox}/></TableCell>}\n                {(!this.state.isEditing && !this.props.performedIsHidden) && this.props.eventData.alternative === 0 && <TableCell align=\"center\" style={styles.smallCell}>&nbsp;</TableCell>}\n                {(!this.state.isEditing && !this.props.performedIsHidden) && this.props.eventData.forest === 1 && <TableCell align=\"center\" style={styles.smallCell}><Checkbox checked={true} disabled style={styles.checkbox}/></TableCell>}\n                {(!this.state.isEditing && !this.props.performedIsHidden) && this.props.eventData.forest === 0 && <TableCell align=\"center\" style={styles.smallCell}>&nbsp;</TableCell>}\n                {(!this.state.isEditing && !this.props.performedIsHidden) && this.props.eventData.path === 1 && <TableCell align=\"center\" style={styles.smallCell}><Checkbox checked={true} disabled style={styles.checkbox}/></TableCell>}\n                {(!this.state.isEditing && !this.props.performedIsHidden) && this.props.eventData.path === 0 && <TableCell align=\"center\" style={styles.smallCell}>&nbsp;</TableCell>}\n                {(!this.state.isEditing && !this.props.performedIsHidden) && <TableCell align=\"right\" style={styles.cell}>{getDistance(this.props.eventData.distance)}</TableCell>}\n                {(!this.state.isEditing && !this.props.performedIsHidden) && <TableCell align=\"right\" style={styles.cell}>{getTime(this.props.eventData.movingTime)}</TableCell>}\n                \n                {this.props.performedIsHidden && <TableCell style={styles.cell} colSpan=\"12\"></TableCell>}\n\n                {(this.state.isEditing && !this.props.performedIsHidden) && <TableCell style={styles.cell}><TextField variant=\"outlined\" multiline={true} fullWidth={true} rows={3} value={this.state.name} onChange={(e) => this.setState({ name: e.target.value })} name=\"nameField\"/></TableCell>}\n                {(this.state.isEditing && !this.props.performedIsHidden) && <TableCell style={styles.cell}><Select defaultValue={this.props.eventData.type} onChange={(e) => this.setState({ type: e.target.value })}><MenuItem value=\"ol\"><img src={process.env.PUBLIC_URL + '/olskarm.png'} alt=\"OL\" height={16} width={16}/><span>OL</span></MenuItem><MenuItem value=\"night\"><NightsStayIcon/><span>Natt-OL</span></MenuItem><MenuItem value=\"Run\"><DirectionsRunOutlinedIcon/><span>Löpning</span></MenuItem><MenuItem value=\"Ride\"><DirectionsBikeOutlinedIcon/><span>Cykel</span></MenuItem><MenuItem value=\"VirtualRide\"><DirectionsBikeOutlinedIcon/><span>Cykel inne</span></MenuItem><MenuItem value=\"WeightTraining\"><FitnessCenterOutlinedIcon/><span>Styrketräning</span></MenuItem><MenuItem value=\"Swim\"><PoolIcon/><span>Simning</span></MenuItem><MenuItem value=\"Workout\"><AccessibilityNewIcon/><span>Annat</span></MenuItem><MenuItem value=\"NordicSki\"><img src={process.env.PUBLIC_URL + '/ski.png'} alt=\"Ski\" height={16} width={16}/><span>Skidor</span></MenuItem><MenuItem value=\"RollerSki\"><img src={process.env.PUBLIC_URL + '/ski.png'} alt=\"Rullskidor\" height={16} width={16}/><span>Rullskidor</span></MenuItem><MenuItem value=\"Kayaking\"><img src={process.env.PUBLIC_URL + '/kayak.png'} alt=\"Kayak\" height={16} width={16}/><span>Kajak</span></MenuItem><MenuItem value=\"Walk\"><DirectionsWalkIcon/><span>Gång</span></MenuItem></Select></TableCell>}\n                {(this.state.isEditing && !this.props.performedIsHidden) && <TableCell align=\"center\" style={styles.smallCell}><Checkbox checked={this.state.ol} onChange={(e) => this.setState({ ol: e.target.checked })} style={styles.checkbox}/></TableCell>}\n                {(this.state.isEditing && !this.props.performedIsHidden) && <TableCell align=\"center\" style={styles.smallCell}><Checkbox checked={this.state.night} onChange={(e) => this.setState({ night: e.target.checked })} style={styles.checkbox}/></TableCell>}\n                {(this.state.isEditing && !this.props.performedIsHidden) && <TableCell align=\"center\" style={styles.smallCell}><Checkbox checked={this.state.quality} onChange={(e) => this.setState({ quality: e.target.checked })} style={styles.checkbox}/></TableCell>}\n                {(this.state.isEditing && !this.props.performedIsHidden) && <TableCell align=\"center\" style={styles.smallCell}><Checkbox checked={this.state.lsd} onChange={(e) => this.setState({ lsd: e.target.checked })} style={styles.checkbox}/></TableCell>}\n                {(this.state.isEditing && !this.props.performedIsHidden) && <TableCell align=\"center\" style={styles.smallCell}><Checkbox checked={this.state.strength} onChange={(e) => this.setState({ strength: e.target.checked })} style={styles.checkbox}/></TableCell>}\n                {(this.state.isEditing && !this.props.performedIsHidden) && <TableCell align=\"center\" style={styles.smallCell}><Checkbox checked={this.state.alternative} onChange={(e) => this.setState({ alternative: e.target.checked })} style={styles.checkbox}/></TableCell>}\n                {(this.state.isEditing && !this.props.performedIsHidden) && <TableCell align=\"center\" style={styles.smallCell}><Checkbox checked={this.state.forest} onChange={(e) => this.setState({ forest: e.target.checked })} style={styles.checkbox}/></TableCell>}\n                {(this.state.isEditing && !this.props.performedIsHidden) && <TableCell align=\"center\" style={styles.smallCell}><Checkbox checked={this.state.path} onChange={(e) => this.setState({ path: e.target.checked })} style={styles.checkbox}/></TableCell>}\n                {(this.state.isEditing && !this.props.performedIsHidden) && <TableCell style={styles.dataCell}><TextField variant=\"outlined\" fullWidth={true} value={this.state.distance} onChange={this.correctDistance} error={this.validateDistance()} helperText={this.validateDistance() ? 'Fel' : ' '}/></TableCell>}\n                {(this.state.isEditing && !this.props.performedIsHidden) && <TableCell style={styles.dataCell}><TextField variant=\"outlined\" fullWidth={true} value={this.state.movingTime} onChange={this.correctMovingTime} error={this.validateMovingTime()} helperText={this.validateMovingTime() ? 'Fel' : ' '}/></TableCell>}\n            </TableRow>\n        );\n    }\n}\n\nexport default WeekEvent;\n",["81","82"],"/Users/niklasbratt/Documents/orion/trbok/src/components/AppLoggedIn.js",[],"/Users/niklasbratt/Documents/orion/trbok/src/components/SignInSide.js",[],"/Users/niklasbratt/Documents/orion/trbok/src/components/App.js",[],"/Users/niklasbratt/Documents/orion/trbok/src/components/SignUp.js",["83"],"import React from 'react';\nimport { useHistory } from \"react-router-dom\";\nimport axios from 'axios';\nimport Avatar from '@material-ui/core/Avatar';\nimport Button from '@material-ui/core/Button';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport TextField from '@material-ui/core/TextField';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport Link from '@material-ui/core/Link';\nimport Grid from '@material-ui/core/Grid';\nimport Box from '@material-ui/core/Box';\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\nimport Typography from '@material-ui/core/Typography';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Container from '@material-ui/core/Container';\n\nconst secret = require('./secret');\n\nfunction Copyright() {\n  return (\n    <Typography variant=\"body2\" color=\"textSecondary\" align=\"center\">\n      {'Copyright © '}\n      <Link color=\"inherit\" href=\"http://www.okorion.com/\">\n        OK Orion Stars FC\n      </Link>{' '}\n      {new Date().getFullYear()}\n      {'.'}\n    </Typography>\n  );\n}\n\nconst useStyles = makeStyles((theme) => ({\n  paper: {\n    marginTop: theme.spacing(8),\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center',\n  },\n  avatar: {\n    margin: theme.spacing(1),\n    backgroundColor: theme.palette.secondary.main,\n  },\n  form: {\n    width: '100%', // Fix IE 11 issue.\n    marginTop: theme.spacing(3),\n  },\n  submit: {\n    margin: theme.spacing(3, 0, 2),\n  },\n}));\n\nexport default function SignUp() {\n  const classes = useStyles();\n  const history = useHistory();\n  //const backendBaseUrl = 'http://localhost:3333';\n    const backendBaseUrl = 'https://trbokbackend.niklasking.com';\n\n\n  const onFormSubmit = async (event) => {\n    event.preventDefault();\n    const {name, username, email, password, useStrava, isPrivate } = event.target.elements;\n    const user = {\n        name: name.value,\n        username: username.value,\n        email: email.value,\n        password: password.value,\n        useStrava: useStrava.checked ? true : false,\n        private: isPrivate.checked ? true : false\n    };\n    const response = await axios.post(backendBaseUrl + '/api/v1/register', user);\n    if (response.data.success) {\n//            console.log(response.data.user);\n        if (user.useStrava) {\n            const url = 'https://www.strava.com/oauth/authorize' +\n                        '?client_id=' + secret.clientID +\n                        '&redirect_uri=https://trbokbackend.niklasking.com/stravaCallback' +\n                        '&response_type=code' +\n                        '&approval_promp=auto' +\n                        '&scope=activity:read_all' +\n                        '&state=' + response.data.user._id;\n\n            window.location.href = url;\n        \n            //axios.post(backendBaseUrl + '/api/v1/registerStrava', updatedUser);\n        }\n//        history.push('/');\n//        props.setLoggedInUser(response.data.user);\n    } else {\n        console.log(response.data.message);\n    }\n\n}\n\n  return (\n    <Container component=\"main\" maxWidth=\"xs\">\n      <CssBaseline />\n      <div className={classes.paper}>\n        <Avatar className={classes.avatar}>\n          <LockOutlinedIcon />\n        </Avatar>\n        <Typography component=\"h1\" variant=\"h5\">\n          Skapa en ny användare\n        </Typography>\n        <form className={classes.form} onSubmit={onFormSubmit}>\n          <Grid container spacing={2}>\n            <Grid item xs={12}>\n              <TextField\n                autoComplete=\"name\"\n                name=\"name\"\n                variant=\"outlined\"\n                required\n                fullWidth\n                id=\"name\"\n                label=\"Namn\"\n                autoFocus\n              />\n            </Grid>\n            <Grid item xs={12}>\n              <TextField\n                variant=\"outlined\"\n                required\n                fullWidth\n                id=\"username\"\n                label=\"Användarnamn\"\n                name=\"username\"\n                autoComplete=\"username\"\n              />\n            </Grid>\n            <Grid item xs={12}>\n              <TextField\n                variant=\"outlined\"\n                fullWidth\n                id=\"email\"\n                label=\"E-postadress\"\n                name=\"email\"\n                autoComplete=\"email\"\n              />\n            </Grid>\n            <Grid item xs={12}>\n              <TextField\n                variant=\"outlined\"\n                required\n                fullWidth\n                name=\"password\"\n                label=\"Lösenord\"\n                type=\"password\"\n                id=\"password\"\n                autoComplete=\"current-password\"\n              />\n            </Grid>\n            <Grid item xs={12}>\n              <FormControlLabel\n                control={<Checkbox id=\"useStrava\" value=\"useStrava\" color=\"primary\" defaultChecked={true}/>}\n                label=\"Jag vill hämta min träning automatiskt från Strava.\"\n              />\n            </Grid>\n            <Grid item xs={12}>\n              <FormControlLabel\n                control={<Checkbox id=\"isPrivate\" value=\"isPrivate\" color=\"primary\" />}\n                label=\"Jag vill vara privat och vill inte dela min träning med andra.\"\n              />\n            </Grid>\n          </Grid>\n          <Button\n            type=\"submit\"\n            fullWidth\n            variant=\"contained\"\n            color=\"primary\"\n            className={classes.submit}\n          >\n            Skapa användare\n          </Button>\n          <Grid container justify=\"flex-end\">\n            <Grid item>\n              <Link href=\"#\" variant=\"body2\">\n                Har du redan en användare? Logga in istället.\n              </Link>\n            </Grid>\n          </Grid>\n        </form>\n      </div>\n      <Box mt={5}>\n        <Copyright />\n      </Box>\n    </Container>\n  );\n}","/Users/niklasbratt/Documents/orion/trbok/src/components/secret.js",[],"/Users/niklasbratt/Documents/orion/trbok/src/components/EditEventDialog.js",[],"/Users/niklasbratt/Documents/orion/trbok/src/components/AddNewEventDialog.js",[],"/Users/niklasbratt/Documents/orion/trbok/src/components/MonthDay.js",["84"],"/Users/niklasbratt/Documents/orion/trbok/src/components/MonthEvent.js",[],"/Users/niklasbratt/Documents/orion/trbok/src/components/Statistics.js",[],{"ruleId":"85","replacedBy":"86"},{"ruleId":"87","replacedBy":"88"},{"ruleId":"89","severity":1,"message":"90","line":8,"column":9,"nodeType":"91","messageId":"92","endLine":8,"endColumn":20},{"ruleId":"89","severity":1,"message":"93","line":11,"column":9,"nodeType":"91","messageId":"92","endLine":11,"endColumn":23},{"ruleId":"89","severity":1,"message":"94","line":8,"column":15,"nodeType":"91","messageId":"92","endLine":8,"endColumn":21},{"ruleId":"89","severity":1,"message":"95","line":133,"column":15,"nodeType":"91","messageId":"92","endLine":133,"endColumn":23},{"ruleId":"85","replacedBy":"96"},{"ruleId":"87","replacedBy":"97"},{"ruleId":"89","severity":1,"message":"98","line":55,"column":9,"nodeType":"91","messageId":"92","endLine":55,"endColumn":16},{"ruleId":"89","severity":1,"message":"94","line":8,"column":15,"nodeType":"91","messageId":"92","endLine":8,"endColumn":21},"no-native-reassign",["99"],"no-negated-in-lhs",["100"],"no-unused-vars","'callRefresh' is assigned a value but never used.","Identifier","unusedVar","'callActivities' is assigned a value but never used.","'styles' is assigned a value but never used.","'response' is assigned a value but never used.",["99"],["100"],"'history' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]